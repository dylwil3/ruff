---
source: crates/ruff_python_semantic/src/cfg/mod.rs
description: "This is a Mermaid graph. You can use https://mermaid.live to visualize it as a diagram."
---
## Function 0
### Source
```python
def func():
    try:
        print("try")
    except:
        print("except")
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["EMPTY"]
	node1((("EXIT")))
	node2["print(#quot;try#quot;)"]
	node3["EXCEPTION DISPATCH"]
	node4["print(#quot;except#quot;)"]
	node0-->node2
	node2-->node3
	node3-->|"except any exception"|node4
	node3==>|"Else"|node1
	node4==>node1
```

## Function 1
### Source
```python
def func():
    x = 1
    try:
        print("try")
    except:
        print("except")
    x = 2
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["x = 1"]
	node1((("EXIT")))
	node2["print(#quot;try#quot;)"]
	node3["x = 2"]
	node4["EXCEPTION DISPATCH"]
	node5["print(#quot;except#quot;)"]
	node0-->node2
	node2-->node4
	node3==>node1
	node4-->|"except any exception"|node5
	node4-->|"Else"|node3
	node5-->node3
```

## Function 2
### Source
```python
def func():
    try:
        print("try")
    except ValueError:
        print("value error")
    except TypeError:
        print("type error")
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["EMPTY"]
	node1((("EXIT")))
	node2["print(#quot;try#quot;)"]
	node3["EXCEPTION DISPATCH"]
	node4["print(#quot;value error#quot;)"]
	node5["print(#quot;type error#quot;)"]
	node0-->node2
	node2-->node3
	node3-->|"except ValueError"|node4
	node3-->|"except TypeError"|node5
	node3==>|"Else"|node1
	node4==>node1
	node5==>node1
```

## Function 3
### Source
```python
def func():
    try:
        for i in [1,2,3]:
            foo(i)
    except:
        print("whoops")
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["EMPTY"]
	node1((("EXIT")))
	node2["EMPTY"]
	node3["EXCEPTION DISPATCH"]
	node4["LOOP GUARD"]
	node5["foo(i)"]
	node6["print(#quot;whoops#quot;)"]
	node0-->node2
	node2-->node4
	node3-->|"except any exception"|node6
	node3==>|"Else"|node1
	node4-->|"for i in [1,2,3]"|node5
	node4-->|"Else"|node3
	node5-->node4
	node6==>node1
```

## Function 4
### Source
```python
def func():
    try:
        print("try")
    except:
        print("except")
    else:
        print("else")
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["EMPTY"]
	node1((("EXIT")))
	node2["print(#quot;try#quot;)"]
	node3["EXCEPTION DISPATCH"]
	node4["print(#quot;except#quot;)"]
	node5["print(#quot;else#quot;)"]
	node0-->node2
	node2-->node3
	node3-->|"except any exception"|node4
	node3-->|"Else"|node5
	node4==>node1
	node5==>node1
```

## Function 5
### Source
```python
def func():
    x = 1
    try:
        print("try")
    except:
        print("except")
    else:
        print("else")
    x = 2
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["x = 1"]
	node1((("EXIT")))
	node2["print(#quot;try#quot;)"]
	node3["x = 2"]
	node4["EXCEPTION DISPATCH"]
	node5["print(#quot;except#quot;)"]
	node6["print(#quot;else#quot;)"]
	node0-->node2
	node2-->node4
	node3==>node1
	node4-->|"except any exception"|node5
	node4-->|"Else"|node6
	node5-->node3
	node6-->node3
```

## Function 6
### Source
```python
def func():
    try:
        print("try")
    except ValueError:
        print("value error")
    except TypeError:
        print("type error")
    else:
        print("else")
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["EMPTY"]
	node1((("EXIT")))
	node2["print(#quot;try#quot;)"]
	node3["EXCEPTION DISPATCH"]
	node4["print(#quot;value error#quot;)"]
	node5["print(#quot;type error#quot;)"]
	node6["print(#quot;else#quot;)"]
	node0-->node2
	node2-->node3
	node3-->|"except ValueError"|node4
	node3-->|"except TypeError"|node5
	node3-->|"Else"|node6
	node4==>node1
	node5==>node1
	node6==>node1
```

## Function 7
### Source
```python
def func():
    try:
        for i in [1,2,3]:
            foo(i)
    except:
        print("whoops")
    else:
        print("else")
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["EMPTY"]
	node1((("EXIT")))
	node2["EMPTY"]
	node3["EXCEPTION DISPATCH"]
	node4["LOOP GUARD"]
	node5["foo(i)"]
	node6["print(#quot;whoops#quot;)"]
	node7["print(#quot;else#quot;)"]
	node0-->node2
	node2-->node4
	node3-->|"except any exception"|node6
	node3-->|"Else"|node7
	node4-->|"for i in [1,2,3]"|node5
	node4-->|"Else"|node3
	node5-->node4
	node6==>node1
	node7==>node1
```

## Function 8
### Source
```python
def func():
    try:
        print("try")
    finally:
        print("finally")
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["EMPTY"]
	node1((("EXIT")))
	node2["print(#quot;try#quot;)"]
	node3["print(#quot;finally#quot;)"]
	node4["RECOVERY"]
	node0-->node2
	node2-->node3
	node3-->node4
	node4==>node1
```

## Function 9
### Source
```python
def func():
    x = 1
    try:
        print("try")
    finally:
        print("finally")
    x = 2
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["x = 1"]
	node1((("EXIT")))
	node2["print(#quot;try#quot;)"]
	node3["x = 2"]
	node4["print(#quot;finally#quot;)"]
	node5["RECOVERY"]
	node0-->node2
	node2-->node4
	node3==>node1
	node4-->node5
	node5-->node3
```

## Function 10
### Source
```python
def func():
    try:
        for i in [1,2,3]:
            foo(i)
    finally:
        print("finally")
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["EMPTY"]
	node1((("EXIT")))
	node2["EMPTY"]
	node3["print(#quot;finally#quot;)"]
	node4["RECOVERY"]
	node5["LOOP GUARD"]
	node6["foo(i)"]
	node0-->node2
	node2-->node5
	node3-->node4
	node4==>node1
	node5-->|"for i in [1,2,3]"|node6
	node5-->|"Else"|node3
	node6-->node5
```

## Function 11
### Source
```python
def func():
    try:
        print("try")
    except:
        print("except")
    finally:
        print("finally")
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["EMPTY"]
	node1((("EXIT")))
	node2["print(#quot;try#quot;)"]
	node3["EXCEPTION DISPATCH"]
	node4["print(#quot;finally#quot;)"]
	node5["RECOVERY"]
	node6["print(#quot;except#quot;)"]
	node0-->node2
	node2-->node3
	node3-->|"except any exception"|node6
	node3-->|"Else"|node4
	node4-->node5
	node5==>node1
	node6-->node4
```

## Function 12
### Source
```python
def func():
    x = 1
    try:
        print("try")
    except:
        print("except")
    finally:
        print("finally")
    x = 2
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["x = 1"]
	node1((("EXIT")))
	node2["print(#quot;try#quot;)"]
	node3["x = 2"]
	node4["EXCEPTION DISPATCH"]
	node5["print(#quot;finally#quot;)"]
	node6["RECOVERY"]
	node7["print(#quot;except#quot;)"]
	node0-->node2
	node2-->node4
	node3==>node1
	node4-->|"except any exception"|node7
	node4-->|"Else"|node5
	node5-->node6
	node6-->node3
	node7-->node5
```

## Function 13
### Source
```python
def func():
    try:
        for i in [1,2,3]:
            foo(i)
    except:
        print("except")
    finally:
        print("finally")
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["EMPTY"]
	node1((("EXIT")))
	node2["EMPTY"]
	node3["EXCEPTION DISPATCH"]
	node4["print(#quot;finally#quot;)"]
	node5["RECOVERY"]
	node6["LOOP GUARD"]
	node7["foo(i)"]
	node8["print(#quot;except#quot;)"]
	node0-->node2
	node2-->node6
	node3-->|"except any exception"|node8
	node3-->|"Else"|node4
	node4-->node5
	node5==>node1
	node6-->|"for i in [1,2,3]"|node7
	node6-->|"Else"|node3
	node7-->node6
	node8-->node4
```
