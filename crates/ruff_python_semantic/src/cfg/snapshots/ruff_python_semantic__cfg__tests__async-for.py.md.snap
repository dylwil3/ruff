---
source: crates/ruff_python_semantic/src/cfg/mod.rs
description: "This is a Mermaid graph. You can use https://mermaid.live to visualize it as a diagram."
---
## Function 0
### Source
```python
def func():
    async for i in range(5):
        print(i)
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["EMPTY"]
	node1((("EXIT")))
	node2["EMPTY"]
	node3["print(i)"]
	node0-->node2
	node2-->|"async for i in range(5)"|node3
	node2==>|"Else"|node1
	node3-->node2
```

## Function 1
### Source
```python
def func():
    async for i in range(20):
        print(i)
    else:
        return 0
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["EMPTY"]
	node1((("EXIT")))
	node2["EMPTY"]
	node3["print(i)"]
	node4["return 0"]
	node0-->node2
	node2-->|"async for i in range(20)"|node3
	node2-->|"Else"|node4
	node3-->node2
	node4==>node1
```

## Function 2
### Source
```python
def func():
    async for i in range(10):
        if i == 5:
            return 1
    return 0
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["EMPTY"]
	node1((("EXIT")))
	node2["return 0"]
	node3["EMPTY"]
	node4["EMPTY"]
	node5["return 1"]
	node0-->node3
	node2==>node1
	node3-->|"async for i in range(10)"|node4
	node3-->|"Else"|node2
	node4-->|"i == 5"|node5
	node4-->|"Else"|node3
	node5==>node1
```

## Function 3
### Source
```python
def func():
    async for i in range(111):
        if i == 5:
            return 1
    else:
        return 0
    return 2
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["EMPTY"]
	node1((("EXIT")))
	node2["return 2"]
	node3["EMPTY"]
	node4["EMPTY"]
	node5["return 0"]
	node6["return 1"]
	node0-->node3
	node2==>node1
	node3-->|"async for i in range(111)"|node4
	node3-->|"Else"|node5
	node4-->|"i == 5"|node6
	node4-->|"Else"|node3
	node5==>node1
	node6==>node1
```

## Function 4
### Source
```python
def func():
    async for i in range(12):
        continue
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["EMPTY"]
	node1((("EXIT")))
	node2["EMPTY"]
	node3["continue"]
	node0-->node2
	node2-->|"async for i in range(12)"|node3
	node2==>|"Else"|node1
	node3-->node2
```

## Function 5
### Source
```python
def func():
    async for i in range(1110):
        if True:
            continue
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["EMPTY"]
	node1((("EXIT")))
	node2["EMPTY"]
	node3["EMPTY"]
	node4["continue"]
	node0-->node2
	node2-->|"async for i in range(1110)"|node3
	node2==>|"Else"|node1
	node3-->|"True"|node4
	node3-->|"Else"|node2
	node4-->node2
```

## Function 6
### Source
```python
def func():
    async for i in range(13):
        break
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["EMPTY"]
	node1((("EXIT")))
	node2["EMPTY"]
	node3["break"]
	node0-->node2
	node2-->|"async for i in range(13)"|node3
	node2==>|"Else"|node1
	node3==>node1
```

## Function 7
### Source
```python
def func():
    async for i in range(1110):
        if True:
            break
```

### Control Flow Graph
```mermaid
flowchart TD
	node0["EMPTY"]
	node1((("EXIT")))
	node2["EMPTY"]
	node3["EMPTY"]
	node4["break"]
	node0-->node2
	node2-->|"async for i in range(1110)"|node3
	node2==>|"Else"|node1
	node3-->|"True"|node4
	node3-->|"Else"|node2
	node4==>node1
```
